{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"D:/I2T/Smarttech/tourbookingwebgit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar maybeJoin = function maybeJoin() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return args.every(function (arg) {\n    return arg;\n  }) ? args.join('') : '';\n};\n\nvar maybeEncode = function maybeEncode(arg) {\n  return arg ? encodeURIComponent(arg) : '';\n};\n\nvar defaults = {\n  sshtemplate: function sshtemplate(_ref) {\n    var domain = _ref.domain,\n        user = _ref.user,\n        project = _ref.project,\n        committish = _ref.committish;\n    return \"git@\".concat(domain, \":\").concat(user, \"/\").concat(project, \".git\").concat(maybeJoin('#', committish));\n  },\n  sshurltemplate: function sshurltemplate(_ref2) {\n    var domain = _ref2.domain,\n        user = _ref2.user,\n        project = _ref2.project,\n        committish = _ref2.committish;\n    return \"git+ssh://git@\".concat(domain, \"/\").concat(user, \"/\").concat(project, \".git\").concat(maybeJoin('#', committish));\n  },\n  browsetemplate: function browsetemplate(_ref3) {\n    var domain = _ref3.domain,\n        user = _ref3.user,\n        project = _ref3.project,\n        committish = _ref3.committish,\n        treepath = _ref3.treepath;\n    return \"https://\".concat(domain, \"/\").concat(user, \"/\").concat(project).concat(maybeJoin('/', treepath, '/', maybeEncode(committish)));\n  },\n  browsefiletemplate: function browsefiletemplate(_ref4) {\n    var domain = _ref4.domain,\n        user = _ref4.user,\n        project = _ref4.project,\n        committish = _ref4.committish,\n        treepath = _ref4.treepath,\n        path = _ref4.path,\n        fragment = _ref4.fragment,\n        hashformat = _ref4.hashformat;\n    return \"https://\".concat(domain, \"/\").concat(user, \"/\").concat(project, \"/\").concat(treepath, \"/\").concat(maybeEncode(committish || 'master'), \"/\").concat(path).concat(maybeJoin('#', hashformat(fragment || '')));\n  },\n  docstemplate: function docstemplate(_ref5) {\n    var domain = _ref5.domain,\n        user = _ref5.user,\n        project = _ref5.project,\n        treepath = _ref5.treepath,\n        committish = _ref5.committish;\n    return \"https://\".concat(domain, \"/\").concat(user, \"/\").concat(project).concat(maybeJoin('/', treepath, '/', maybeEncode(committish)), \"#readme\");\n  },\n  httpstemplate: function httpstemplate(_ref6) {\n    var auth = _ref6.auth,\n        domain = _ref6.domain,\n        user = _ref6.user,\n        project = _ref6.project,\n        committish = _ref6.committish;\n    return \"git+https://\".concat(maybeJoin(auth, '@')).concat(domain, \"/\").concat(user, \"/\").concat(project, \".git\").concat(maybeJoin('#', committish));\n  },\n  filetemplate: function filetemplate(_ref7) {\n    var domain = _ref7.domain,\n        user = _ref7.user,\n        project = _ref7.project,\n        committish = _ref7.committish,\n        path = _ref7.path;\n    return \"https://\".concat(domain, \"/\").concat(user, \"/\").concat(project, \"/raw/\").concat(maybeEncode(committish) || 'master', \"/\").concat(path);\n  },\n  shortcuttemplate: function shortcuttemplate(_ref8) {\n    var type = _ref8.type,\n        user = _ref8.user,\n        project = _ref8.project,\n        committish = _ref8.committish;\n    return \"\".concat(type, \":\").concat(user, \"/\").concat(project).concat(maybeJoin('#', committish));\n  },\n  pathtemplate: function pathtemplate(_ref9) {\n    var user = _ref9.user,\n        project = _ref9.project,\n        committish = _ref9.committish;\n    return \"\".concat(user, \"/\").concat(project).concat(maybeJoin('#', committish));\n  },\n  bugstemplate: function bugstemplate(_ref10) {\n    var domain = _ref10.domain,\n        user = _ref10.user,\n        project = _ref10.project;\n    return \"https://\".concat(domain, \"/\").concat(user, \"/\").concat(project, \"/issues\");\n  },\n  hashformat: formatHashFragment\n};\nvar gitHosts = {};\ngitHosts.github = Object.assign({}, defaults, {\n  // First two are insecure and generally shouldn't be used any more, but\n  // they are still supported.\n  protocols: ['git:', 'http:', 'git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'github.com',\n  treepath: 'tree',\n  filetemplate: function filetemplate(_ref11) {\n    var auth = _ref11.auth,\n        user = _ref11.user,\n        project = _ref11.project,\n        committish = _ref11.committish,\n        path = _ref11.path;\n    return \"https://\".concat(maybeJoin(auth, '@'), \"raw.githubusercontent.com/\").concat(user, \"/\").concat(project, \"/\").concat(maybeEncode(committish) || 'master', \"/\").concat(path);\n  },\n  gittemplate: function gittemplate(_ref12) {\n    var auth = _ref12.auth,\n        domain = _ref12.domain,\n        user = _ref12.user,\n        project = _ref12.project,\n        committish = _ref12.committish;\n    return \"git://\".concat(maybeJoin(auth, '@')).concat(domain, \"/\").concat(user, \"/\").concat(project, \".git\").concat(maybeJoin('#', committish));\n  },\n  tarballtemplate: function tarballtemplate(_ref13) {\n    var domain = _ref13.domain,\n        user = _ref13.user,\n        project = _ref13.project,\n        committish = _ref13.committish;\n    return \"https://codeload.\".concat(domain, \"/\").concat(user, \"/\").concat(project, \"/tar.gz/\").concat(maybeEncode(committish) || 'master');\n  },\n  extract: function extract(url) {\n    var _url$pathname$split = url.pathname.split('/', 5),\n        _url$pathname$split2 = _slicedToArray(_url$pathname$split, 5),\n        user = _url$pathname$split2[1],\n        project = _url$pathname$split2[2],\n        type = _url$pathname$split2[3],\n        committish = _url$pathname$split2[4];\n\n    if (type && type !== 'tree') {\n      return;\n    }\n\n    if (!type) {\n      committish = url.hash.slice(1);\n    }\n\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n\n    if (!user || !project) {\n      return;\n    }\n\n    return {\n      user: user,\n      project: project,\n      committish: committish\n    };\n  }\n});\ngitHosts.bitbucket = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'bitbucket.org',\n  treepath: 'src',\n  tarballtemplate: function tarballtemplate(_ref14) {\n    var domain = _ref14.domain,\n        user = _ref14.user,\n        project = _ref14.project,\n        committish = _ref14.committish;\n    return \"https://\".concat(domain, \"/\").concat(user, \"/\").concat(project, \"/get/\").concat(maybeEncode(committish) || 'master', \".tar.gz\");\n  },\n  extract: function extract(url) {\n    var _url$pathname$split3 = url.pathname.split('/', 4),\n        _url$pathname$split4 = _slicedToArray(_url$pathname$split3, 4),\n        user = _url$pathname$split4[1],\n        project = _url$pathname$split4[2],\n        aux = _url$pathname$split4[3];\n\n    if (['get'].includes(aux)) {\n      return;\n    }\n\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n\n    if (!user || !project) {\n      return;\n    }\n\n    return {\n      user: user,\n      project: project,\n      committish: url.hash.slice(1)\n    };\n  }\n});\ngitHosts.gitlab = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'gitlab.com',\n  treepath: 'tree',\n  httpstemplate: function httpstemplate(_ref15) {\n    var auth = _ref15.auth,\n        domain = _ref15.domain,\n        user = _ref15.user,\n        project = _ref15.project,\n        committish = _ref15.committish;\n    return \"git+https://\".concat(maybeJoin(auth, '@')).concat(domain, \"/\").concat(user, \"/\").concat(project, \".git\").concat(maybeJoin('#', committish));\n  },\n  tarballtemplate: function tarballtemplate(_ref16) {\n    var domain = _ref16.domain,\n        user = _ref16.user,\n        project = _ref16.project,\n        committish = _ref16.committish;\n    return \"https://\".concat(domain, \"/\").concat(user, \"/\").concat(project, \"/repository/archive.tar.gz?ref=\").concat(maybeEncode(committish) || 'master');\n  },\n  extract: function extract(url) {\n    var path = url.pathname.slice(1);\n\n    if (path.includes('/-/') || path.includes('/archive.tar.gz')) {\n      return;\n    }\n\n    var segments = path.split('/');\n    var project = segments.pop();\n\n    if (project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n\n    var user = segments.join('/');\n\n    if (!user || !project) {\n      return;\n    }\n\n    return {\n      user: user,\n      project: project,\n      committish: url.hash.slice(1)\n    };\n  }\n});\ngitHosts.gist = Object.assign({}, defaults, {\n  protocols: ['git:', 'git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'gist.github.com',\n  sshtemplate: function sshtemplate(_ref17) {\n    var domain = _ref17.domain,\n        project = _ref17.project,\n        committish = _ref17.committish;\n    return \"git@\".concat(domain, \":\").concat(project, \".git\").concat(maybeJoin('#', committish));\n  },\n  sshurltemplate: function sshurltemplate(_ref18) {\n    var domain = _ref18.domain,\n        project = _ref18.project,\n        committish = _ref18.committish;\n    return \"git+ssh://git@\".concat(domain, \"/\").concat(project, \".git\").concat(maybeJoin('#', committish));\n  },\n  browsetemplate: function browsetemplate(_ref19) {\n    var domain = _ref19.domain,\n        project = _ref19.project,\n        committish = _ref19.committish;\n    return \"https://\".concat(domain, \"/\").concat(project).concat(maybeJoin('/', maybeEncode(committish)));\n  },\n  browsefiletemplate: function browsefiletemplate(_ref20) {\n    var domain = _ref20.domain,\n        project = _ref20.project,\n        committish = _ref20.committish,\n        path = _ref20.path,\n        hashformat = _ref20.hashformat;\n    return \"https://\".concat(domain, \"/\").concat(project).concat(maybeJoin('/', maybeEncode(committish))).concat(maybeJoin('#', hashformat(path)));\n  },\n  docstemplate: function docstemplate(_ref21) {\n    var domain = _ref21.domain,\n        project = _ref21.project,\n        committish = _ref21.committish;\n    return \"https://\".concat(domain, \"/\").concat(project).concat(maybeJoin('/', maybeEncode(committish)));\n  },\n  httpstemplate: function httpstemplate(_ref22) {\n    var domain = _ref22.domain,\n        project = _ref22.project,\n        committish = _ref22.committish;\n    return \"git+https://\".concat(domain, \"/\").concat(project, \".git\").concat(maybeJoin('#', committish));\n  },\n  filetemplate: function filetemplate(_ref23) {\n    var user = _ref23.user,\n        project = _ref23.project,\n        committish = _ref23.committish,\n        path = _ref23.path;\n    return \"https://gist.githubusercontent.com/\".concat(user, \"/\").concat(project, \"/raw\").concat(maybeJoin('/', maybeEncode(committish)), \"/\").concat(path);\n  },\n  shortcuttemplate: function shortcuttemplate(_ref24) {\n    var type = _ref24.type,\n        project = _ref24.project,\n        committish = _ref24.committish;\n    return \"\".concat(type, \":\").concat(project).concat(maybeJoin('#', committish));\n  },\n  pathtemplate: function pathtemplate(_ref25) {\n    var project = _ref25.project,\n        committish = _ref25.committish;\n    return \"\".concat(project).concat(maybeJoin('#', committish));\n  },\n  bugstemplate: function bugstemplate(_ref26) {\n    var domain = _ref26.domain,\n        project = _ref26.project;\n    return \"https://\".concat(domain, \"/\").concat(project);\n  },\n  gittemplate: function gittemplate(_ref27) {\n    var domain = _ref27.domain,\n        project = _ref27.project,\n        committish = _ref27.committish;\n    return \"git://\".concat(domain, \"/\").concat(project, \".git\").concat(maybeJoin('#', committish));\n  },\n  tarballtemplate: function tarballtemplate(_ref28) {\n    var project = _ref28.project,\n        committish = _ref28.committish;\n    return \"https://codeload.github.com/gist/\".concat(project, \"/tar.gz/\").concat(maybeEncode(committish) || 'master');\n  },\n  extract: function extract(url) {\n    var _url$pathname$split5 = url.pathname.split('/', 4),\n        _url$pathname$split6 = _slicedToArray(_url$pathname$split5, 4),\n        user = _url$pathname$split6[1],\n        project = _url$pathname$split6[2],\n        aux = _url$pathname$split6[3];\n\n    if (aux === 'raw') {\n      return;\n    }\n\n    if (!project) {\n      if (!user) {\n        return;\n      }\n\n      project = user;\n      user = null;\n    }\n\n    if (project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n\n    return {\n      user: user,\n      project: project,\n      committish: url.hash.slice(1)\n    };\n  },\n  hashformat: function hashformat(fragment) {\n    return fragment && 'file-' + formatHashFragment(fragment);\n  }\n});\nvar names = Object.keys(gitHosts);\ngitHosts.byShortcut = {};\ngitHosts.byDomain = {};\n\nfor (var _i = 0, _names = names; _i < _names.length; _i++) {\n  var name = _names[_i];\n  gitHosts.byShortcut[\"\".concat(name, \":\")] = name;\n  gitHosts.byDomain[gitHosts[name].domain] = name;\n}\n\nfunction formatHashFragment(fragment) {\n  return fragment.toLowerCase().replace(/^\\W+|\\/|\\W+$/g, '').replace(/\\W+/g, '-');\n}\n\nmodule.exports = gitHosts;","map":{"version":3,"sources":["D:/I2T/Smarttech/tourbookingwebgit/node_modules/read-package-json/node_modules/hosted-git-info/git-host-info.js"],"names":["maybeJoin","args","every","arg","join","maybeEncode","encodeURIComponent","defaults","sshtemplate","domain","user","project","committish","sshurltemplate","browsetemplate","treepath","browsefiletemplate","path","fragment","hashformat","docstemplate","httpstemplate","auth","filetemplate","shortcuttemplate","type","pathtemplate","bugstemplate","formatHashFragment","gitHosts","github","Object","assign","protocols","gittemplate","tarballtemplate","extract","url","pathname","split","hash","slice","endsWith","bitbucket","aux","includes","gitlab","segments","pop","gist","names","keys","byShortcut","byDomain","name","toLowerCase","replace","module","exports"],"mappings":"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","sourcesContent":["'use strict'\nconst maybeJoin = (...args) => args.every(arg => arg) ? args.join('') : ''\nconst maybeEncode = (arg) => arg ? encodeURIComponent(arg) : ''\n\nconst defaults = {\n  sshtemplate: ({ domain, user, project, committish }) => `git@${domain}:${user}/${project}.git${maybeJoin('#', committish)}`,\n  sshurltemplate: ({ domain, user, project, committish }) => `git+ssh://git@${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  browsetemplate: ({ domain, user, project, committish, treepath }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}`,\n  browsefiletemplate: ({ domain, user, project, committish, treepath, path, fragment, hashformat }) => `https://${domain}/${user}/${project}/${treepath}/${maybeEncode(committish || 'master')}/${path}${maybeJoin('#', hashformat(fragment || ''))}`,\n  docstemplate: ({ domain, user, project, treepath, committish }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}#readme`,\n  httpstemplate: ({ auth, domain, user, project, committish }) => `git+https://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  filetemplate: ({ domain, user, project, committish, path }) => `https://${domain}/${user}/${project}/raw/${maybeEncode(committish) || 'master'}/${path}`,\n  shortcuttemplate: ({ type, user, project, committish }) => `${type}:${user}/${project}${maybeJoin('#', committish)}`,\n  pathtemplate: ({ user, project, committish }) => `${user}/${project}${maybeJoin('#', committish)}`,\n  bugstemplate: ({ domain, user, project }) => `https://${domain}/${user}/${project}/issues`,\n  hashformat: formatHashFragment\n}\n\nconst gitHosts = {}\ngitHosts.github = Object.assign({}, defaults, {\n  // First two are insecure and generally shouldn't be used any more, but\n  // they are still supported.\n  protocols: ['git:', 'http:', 'git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'github.com',\n  treepath: 'tree',\n  filetemplate: ({ auth, user, project, committish, path }) => `https://${maybeJoin(auth, '@')}raw.githubusercontent.com/${user}/${project}/${maybeEncode(committish) || 'master'}/${path}`,\n  gittemplate: ({ auth, domain, user, project, committish }) => `git://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({ domain, user, project, committish }) => `https://codeload.${domain}/${user}/${project}/tar.gz/${maybeEncode(committish) || 'master'}`,\n  extract: (url) => {\n    let [, user, project, type, committish] = url.pathname.split('/', 5)\n    if (type && type !== 'tree') {\n      return\n    }\n\n    if (!type) {\n      committish = url.hash.slice(1)\n    }\n\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    if (!user || !project) {\n      return\n    }\n\n    return { user, project, committish }\n  }\n})\n\ngitHosts.bitbucket = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'bitbucket.org',\n  treepath: 'src',\n  tarballtemplate: ({ domain, user, project, committish }) => `https://${domain}/${user}/${project}/get/${maybeEncode(committish) || 'master'}.tar.gz`,\n  extract: (url) => {\n    let [, user, project, aux] = url.pathname.split('/', 4)\n    if (['get'].includes(aux)) {\n      return\n    }\n\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    if (!user || !project) {\n      return\n    }\n\n    return { user, project, committish: url.hash.slice(1) }\n  }\n})\n\ngitHosts.gitlab = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'gitlab.com',\n  treepath: 'tree',\n  httpstemplate: ({ auth, domain, user, project, committish }) => `git+https://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({ domain, user, project, committish }) => `https://${domain}/${user}/${project}/repository/archive.tar.gz?ref=${maybeEncode(committish) || 'master'}`,\n  extract: (url) => {\n    const path = url.pathname.slice(1)\n    if (path.includes('/-/') || path.includes('/archive.tar.gz')) {\n      return\n    }\n\n    const segments = path.split('/')\n    let project = segments.pop()\n    if (project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    const user = segments.join('/')\n    if (!user || !project) {\n      return\n    }\n\n    return { user, project, committish: url.hash.slice(1) }\n  }\n})\n\ngitHosts.gist = Object.assign({}, defaults, {\n  protocols: ['git:', 'git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'gist.github.com',\n  sshtemplate: ({ domain, project, committish }) => `git@${domain}:${project}.git${maybeJoin('#', committish)}`,\n  sshurltemplate: ({ domain, project, committish }) => `git+ssh://git@${domain}/${project}.git${maybeJoin('#', committish)}`,\n  browsetemplate: ({ domain, project, committish }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}`,\n  browsefiletemplate: ({ domain, project, committish, path, hashformat }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}${maybeJoin('#', hashformat(path))}`,\n  docstemplate: ({ domain, project, committish }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}`,\n  httpstemplate: ({ domain, project, committish }) => `git+https://${domain}/${project}.git${maybeJoin('#', committish)}`,\n  filetemplate: ({ user, project, committish, path }) => `https://gist.githubusercontent.com/${user}/${project}/raw${maybeJoin('/', maybeEncode(committish))}/${path}`,\n  shortcuttemplate: ({ type, project, committish }) => `${type}:${project}${maybeJoin('#', committish)}`,\n  pathtemplate: ({ project, committish }) => `${project}${maybeJoin('#', committish)}`,\n  bugstemplate: ({ domain, project }) => `https://${domain}/${project}`,\n  gittemplate: ({ domain, project, committish }) => `git://${domain}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({ project, committish }) => `https://codeload.github.com/gist/${project}/tar.gz/${maybeEncode(committish) || 'master'}`,\n  extract: (url) => {\n    let [, user, project, aux] = url.pathname.split('/', 4)\n    if (aux === 'raw') {\n      return\n    }\n\n    if (!project) {\n      if (!user) {\n        return\n      }\n\n      project = user\n      user = null\n    }\n\n    if (project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    return { user, project, committish: url.hash.slice(1) }\n  },\n  hashformat: function (fragment) {\n    return fragment && 'file-' + formatHashFragment(fragment)\n  }\n})\n\nconst names = Object.keys(gitHosts)\ngitHosts.byShortcut = {}\ngitHosts.byDomain = {}\nfor (const name of names) {\n  gitHosts.byShortcut[`${name}:`] = name\n  gitHosts.byDomain[gitHosts[name].domain] = name\n}\n\nfunction formatHashFragment (fragment) {\n  return fragment.toLowerCase().replace(/^\\W+|\\/|\\W+$/g, '').replace(/\\W+/g, '-')\n}\n\nmodule.exports = gitHosts\n"]},"metadata":{},"sourceType":"script"}