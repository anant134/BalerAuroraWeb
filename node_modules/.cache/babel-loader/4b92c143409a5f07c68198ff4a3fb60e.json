{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"D:/I2T/Smarttech/tourbookingwebgit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"D:/I2T/Smarttech/tourbookingwebgit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:/I2T/Smarttech/tourbookingwebgit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar gitHosts = require('./git-host-info.js');\n\nvar GitHost = /*#__PURE__*/function () {\n  function GitHost(type, user, auth, project, committish, defaultRepresentation) {\n    var opts = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};\n\n    _classCallCheck(this, GitHost);\n\n    Object.assign(this, gitHosts[type]);\n    this.type = type;\n    this.user = user;\n    this.auth = auth;\n    this.project = project;\n    this.committish = committish;\n    this.default = defaultRepresentation;\n    this.opts = opts;\n  }\n\n  _createClass(GitHost, [{\n    key: \"hash\",\n    value: function hash() {\n      return this.committish ? \"#\".concat(this.committish) : '';\n    }\n  }, {\n    key: \"ssh\",\n    value: function ssh(opts) {\n      return this._fill(this.sshtemplate, opts);\n    }\n  }, {\n    key: \"_fill\",\n    value: function _fill(template, opts) {\n      if (typeof template === 'function') {\n        var options = _objectSpread(_objectSpread(_objectSpread({}, this), this.opts), opts); // the path should always be set so we don't end up with 'undefined' in urls\n\n\n        if (!options.path) {\n          options.path = '';\n        } // template functions will insert the leading slash themselves\n\n\n        if (options.path.startsWith('/')) {\n          options.path = options.path.slice(1);\n        }\n\n        if (options.noCommittish) {\n          options.committish = null;\n        }\n\n        var result = template(options);\n        return options.noGitPlus && result.startsWith('git+') ? result.slice(4) : result;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"sshurl\",\n    value: function sshurl(opts) {\n      return this._fill(this.sshurltemplate, opts);\n    }\n  }, {\n    key: \"browse\",\n    value: function browse(path, fragment, opts) {\n      // not a string, treat path as opts\n      if (typeof path !== 'string') {\n        return this._fill(this.browsetemplate, path);\n      }\n\n      if (typeof fragment !== 'string') {\n        opts = fragment;\n        fragment = null;\n      }\n\n      return this._fill(this.browsefiletemplate, _objectSpread(_objectSpread({}, opts), {}, {\n        fragment: fragment,\n        path: path\n      }));\n    }\n  }, {\n    key: \"docs\",\n    value: function docs(opts) {\n      return this._fill(this.docstemplate, opts);\n    }\n  }, {\n    key: \"bugs\",\n    value: function bugs(opts) {\n      return this._fill(this.bugstemplate, opts);\n    }\n  }, {\n    key: \"https\",\n    value: function https(opts) {\n      return this._fill(this.httpstemplate, opts);\n    }\n  }, {\n    key: \"git\",\n    value: function git(opts) {\n      return this._fill(this.gittemplate, opts);\n    }\n  }, {\n    key: \"shortcut\",\n    value: function shortcut(opts) {\n      return this._fill(this.shortcuttemplate, opts);\n    }\n  }, {\n    key: \"path\",\n    value: function path(opts) {\n      return this._fill(this.pathtemplate, opts);\n    }\n  }, {\n    key: \"tarball\",\n    value: function tarball(opts) {\n      return this._fill(this.tarballtemplate, _objectSpread(_objectSpread({}, opts), {}, {\n        noCommittish: false\n      }));\n    }\n  }, {\n    key: \"file\",\n    value: function file(path, opts) {\n      return this._fill(this.filetemplate, _objectSpread(_objectSpread({}, opts), {}, {\n        path: path\n      }));\n    }\n  }, {\n    key: \"getDefaultRepresentation\",\n    value: function getDefaultRepresentation() {\n      return this.default;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString(opts) {\n      if (this.default && typeof this[this.default] === 'function') {\n        return this[this.default](opts);\n      }\n\n      return this.sshurl(opts);\n    }\n  }]);\n\n  return GitHost;\n}();\n\nmodule.exports = GitHost;","map":{"version":3,"sources":["D:/I2T/Smarttech/tourbookingwebgit/node_modules/read-package-json/node_modules/hosted-git-info/git-host.js"],"names":["gitHosts","require","GitHost","type","user","auth","project","committish","defaultRepresentation","opts","Object","assign","default","_fill","sshtemplate","template","options","path","startsWith","slice","noCommittish","result","noGitPlus","sshurltemplate","fragment","browsetemplate","browsefiletemplate","docstemplate","bugstemplate","httpstemplate","gittemplate","shortcuttemplate","pathtemplate","tarballtemplate","filetemplate","sshurl","module","exports"],"mappings":"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","sourcesContent":["'use strict'\nconst gitHosts = require('./git-host-info.js')\n\nclass GitHost {\n  constructor (type, user, auth, project, committish, defaultRepresentation, opts = {}) {\n    Object.assign(this, gitHosts[type])\n    this.type = type\n    this.user = user\n    this.auth = auth\n    this.project = project\n    this.committish = committish\n    this.default = defaultRepresentation\n    this.opts = opts\n  }\n\n  hash () {\n    return this.committish ? `#${this.committish}` : ''\n  }\n\n  ssh (opts) {\n    return this._fill(this.sshtemplate, opts)\n  }\n\n  _fill (template, opts) {\n    if (typeof template === 'function') {\n      const options = { ...this, ...this.opts, ...opts }\n\n      // the path should always be set so we don't end up with 'undefined' in urls\n      if (!options.path) {\n        options.path = ''\n      }\n\n      // template functions will insert the leading slash themselves\n      if (options.path.startsWith('/')) {\n        options.path = options.path.slice(1)\n      }\n\n      if (options.noCommittish) {\n        options.committish = null\n      }\n\n      const result = template(options)\n      return options.noGitPlus && result.startsWith('git+') ? result.slice(4) : result\n    }\n\n    return null\n  }\n\n  sshurl (opts) {\n    return this._fill(this.sshurltemplate, opts)\n  }\n\n  browse (path, fragment, opts) {\n    // not a string, treat path as opts\n    if (typeof path !== 'string') {\n      return this._fill(this.browsetemplate, path)\n    }\n\n    if (typeof fragment !== 'string') {\n      opts = fragment\n      fragment = null\n    }\n    return this._fill(this.browsefiletemplate, { ...opts, fragment, path })\n  }\n\n  docs (opts) {\n    return this._fill(this.docstemplate, opts)\n  }\n\n  bugs (opts) {\n    return this._fill(this.bugstemplate, opts)\n  }\n\n  https (opts) {\n    return this._fill(this.httpstemplate, opts)\n  }\n\n  git (opts) {\n    return this._fill(this.gittemplate, opts)\n  }\n\n  shortcut (opts) {\n    return this._fill(this.shortcuttemplate, opts)\n  }\n\n  path (opts) {\n    return this._fill(this.pathtemplate, opts)\n  }\n\n  tarball (opts) {\n    return this._fill(this.tarballtemplate, { ...opts, noCommittish: false })\n  }\n\n  file (path, opts) {\n    return this._fill(this.filetemplate, { ...opts, path })\n  }\n\n  getDefaultRepresentation () {\n    return this.default\n  }\n\n  toString (opts) {\n    if (this.default && typeof this[this.default] === 'function') {\n      return this[this.default](opts)\n    }\n\n    return this.sshurl(opts)\n  }\n}\nmodule.exports = GitHost\n"]},"metadata":{},"sourceType":"script"}