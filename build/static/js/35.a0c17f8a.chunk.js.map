{"version":3,"sources":["views/service/dataservice.js","views/common/common.js","views/charts/ChartLineSimple.js","views/charts/ChartBarSimple.js","views/widgets/WidgetsDropdown.js"],"names":["dataservice","controller","reqbody","a","requestOptions","method","headers","body","JSON","stringify","url","fetch","then","response","json","data","ok","error","message","status","Promise","reject","catch","_host","commondata","require","mode","fileuploadurl","guesttemplate","baseurl","ChartLineSimple","props","borderColor","backgroundColor","pointHoverBackgroundColor","dataPoints","label","labels","pointed","attributes","pointHoverColor","defaultDatasets","getColor","pointBackgroundColor","pointedOptions","scales","xAxes","offset","gridLines","color","zeroLineColor","ticks","fontSize","fontColor","yAxes","display","min","Math","apply","max","elements","line","borderWidth","point","radius","hitRadius","hoverRadius","straightOptions","defaultOptions","options","Object","assign","maintainAspectRatio","legend","computedDatasets","deepObjectsMerge","datasets","computedOptions","defaultProps","ChartBarSimple","datareturn","Array","isArray","index","length","element","push","WidgetsDropdown","useState","GAmonth","setGAmonth","GAmonthstr","setGAmonthstr","Cmonthstr","setCmonthstr","setCmonth","GARawData","setGARawData","GAData","setGAData","GALabel","setGALabel","CRawData","CData","setCData","CLabel","setCLabel","name","id","handleClick","opt","monthstr","_GAData","_GAlabels","newGAData","filter","x","parseFloat","mnt","cnt","dt","_CData","_Clabels","newCData","useEffect","isFetchCurrentMonth","Month","requestfor","isCurrentMonth","month","resultkey","_GARawdata","resultvalue","count","sm","lg","header","text","footerSlot","className","style","height","placement","onClick","tension"],"mappings":"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","file":"static/js/35.a0c17f8a.chunk.js","sourcesContent":["import common from '../common/common';\r\nconst dataservice = async (controller, reqbody) => {\r\n\r\n  const requestOptions = {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(reqbody)\r\n  };\r\n  //common.baseurl +;\r\n  // https://maubantourism.smartpay.ph/\r\n  // https://tourism-test.smartpay.ph/\r\n  const url = \"https://maubantourism.smartpay.ph/tourbookingphp/\" + controller + \".php\"\r\n  return await fetch(url, requestOptions)\r\n    .then(async response => {\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        const error = (data && data.message) || response.status;\r\n        return Promise.reject(error);\r\n      } else {\r\n        return data;\r\n      }\r\n\r\n    })\r\n    .catch(error => {\r\n      return Promise.reject(error);\r\n    });\r\n\r\n}\r\n\r\nexport default dataservice","var readJson = require('read-package-json')\r\nvar data = require('../../../package.json')\r\nvar _host = \"\";\r\n_host = \"https://maubantourism.smartpay.ph\";\r\nlet commondata;\r\nif (data.mode == \"dev\") {\r\n  commondata = {\r\n    fileuploadurl: \"/tourbookingphp/upload.php\",\r\n    guesttemplate: _host + \"/tourbookingphp/guesttemplate.xlsx\",\r\n    //  filepath:_host+\"/tourbooking/uploads/\",\r\n    baseurl: _host + \"/tourbookingphp/\",\r\n  }\r\n} else {\r\n\r\n  commondata = {\r\n    fileuploadurl: \"/tourbookingphp/upload.php\",\r\n    guesttemplate: \"/tourbookingphp/guesttemplate.xlsx\",\r\n    //  filepath:_host+\"/tourbooking/uploads/\",\r\n    baseurl: \"/tourbookingphp/\",\r\n  }\r\n}\r\n\r\n// _host=window.location.host;\r\n//  const commondata = {\r\n//      fileuploadurl:_host+\"/tourbookingphp/upload.php\",\r\n//     //  filepath:_host+\"/tourbooking/uploads/\",\r\n//      baseurl: _host+\"/tourbookingphp/\", \r\n//  }\r\n//live\r\n// const commondata = {\r\n//     fileuploadurl:\"/tourbookingphp/upload.php\",\r\n//    //  filepath:_host+\"/tourbooking/uploads/\",\r\n//     baseurl: \"/tourbookingphp/\", \r\n// }\r\n//staging\r\n// const commondata = {\r\n//     fileuploadurl:\"/tourbookingphp/upload.php\",\r\n//    //  filepath:_host+\"/tourbooking/uploads/\",\r\n//     baseurl: _host+\"/tourbookingphp/\", \r\n// }\r\n\r\n\r\n//  const commondata = {\r\n//          fileuploadurl:\"/investorportalphp/upload.php\",\r\n//          filepath:\"/investorportalphp/uploads/\",\r\n//          baseurl: \"/investorportalphp/api.php\", \r\n//      }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default commondata\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { getColor, deepObjectsMerge } from '@coreui/utils'\r\nimport { CChartLine } from '@coreui/react-chartjs'\r\n\r\nconst ChartLineSimple = props => {\r\n\r\n  const {\r\n    borderColor,\r\n    backgroundColor,\r\n    pointHoverBackgroundColor,\r\n    dataPoints,\r\n    label,\r\n    labels,\r\n    pointed,\r\n    ...attributes\r\n  } = props\r\n\r\n  const pointHoverColor = (() => {\r\n    if (pointHoverBackgroundColor) {\r\n      return pointHoverBackgroundColor\r\n    } else if (backgroundColor !== 'transparent') {\r\n      return backgroundColor\r\n    }\r\n    return borderColor\r\n  })()\r\n\r\n  const defaultDatasets = (() => {\r\n    return [\r\n      {\r\n        data: dataPoints,\r\n        borderColor: getColor(borderColor),\r\n        backgroundColor: getColor(backgroundColor),\r\n        pointBackgroundColor: getColor(pointHoverColor),\r\n        pointHoverBackgroundColor: getColor(pointHoverColor),\r\n        label\r\n      }\r\n    ]\r\n  })()\r\n\r\n  const pointedOptions = (() => {\r\n    return {\r\n      scales: {\r\n        xAxes: [\r\n          {\r\n            offset: true,\r\n            gridLines: {\r\n              color: 'transparent',\r\n              zeroLineColor: 'transparent'\r\n            },\r\n            ticks: {\r\n              fontSize: 2,\r\n              fontColor: 'transparent'\r\n            }\r\n          }\r\n        ],\r\n        yAxes: [\r\n          {\r\n            display: false,\r\n            ticks: {\r\n              display: false,\r\n              min: Math.min.apply(Math, dataPoints) - 5,\r\n              max: Math.max.apply(Math, dataPoints) + 5\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      elements: {\r\n        line: {\r\n          borderWidth: 1\r\n        },\r\n        point: {\r\n          radius: 4,\r\n          hitRadius: 10,\r\n          hoverRadius: 4\r\n        }\r\n      }\r\n    }\r\n  })()\r\n\r\n  const straightOptions = (() => {\r\n    return {\r\n      scales: {\r\n        xAxes: [{\r\n          display: false\r\n        }],\r\n        yAxes: [{\r\n          display: false\r\n        }]\r\n      },\r\n      elements: {\r\n        line: {\r\n          borderWidth: 2\r\n        },\r\n        point: {\r\n          radius: 0,\r\n          hitRadius: 10,\r\n          hoverRadius: 4\r\n        }\r\n      }\r\n    }\r\n  })()\r\n\r\n  const defaultOptions = (() => {\r\n    const options = pointed ? pointedOptions : straightOptions\r\n    return Object.assign({}, options, {\r\n      maintainAspectRatio: false,\r\n      legend: {\r\n        display: false\r\n      }\r\n    })\r\n  })()\r\n\r\n  const computedDatasets = (() => {\r\n    return deepObjectsMerge(defaultDatasets, attributes.datasets || {})\r\n  })()\r\n\r\n  const computedOptions = (() => {\r\n    return deepObjectsMerge(defaultOptions, attributes.options || {})\r\n  })()\r\n\r\n  // render\r\n\r\n  return (\r\n    <CChartLine\r\n      {...attributes}\r\n      datasets={computedDatasets}\r\n      options={computedOptions}\r\n      labels={labels}\r\n    />\r\n  )\r\n}\r\n\r\nChartLineSimple.propTypes = {\r\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n  className: PropTypes.string,\r\n  //\r\n  borderColor: PropTypes.string,\r\n  backgroundColor: PropTypes.string,\r\n  pointHoverBackgroundColor: PropTypes.string,\r\n  dataPoints: PropTypes.array,\r\n  label: PropTypes.string,\r\n  labels: PropTypes.array,\r\n  pointed: PropTypes.bool\r\n};\r\n\r\nChartLineSimple.defaultProps = {\r\n  borderColor: 'rgba(255,255,255,.55)',\r\n  backgroundColor: 'transparent',\r\n  dataPoints: [10, 22, 34, 46, 58, 70, 46, 23, 45, 78, 34, 12],\r\n  label: 'Sales'\r\n};\r\n\r\nexport default ChartLineSimple\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { getColor } from '@coreui/utils'\r\nimport { CChartBar } from '@coreui/react-chartjs'\r\n\r\nconst ChartBarSimple = props => {\r\n\r\n  const {\r\n    backgroundColor,\r\n    pointHoverBackgroundColor,\r\n    dataPoints,\r\n    label,\r\n    pointed,\r\n    ...attributes\r\n  } = props\r\n\r\n  const defaultDatasets = (() => {\r\n\r\n    var datareturn = []\r\n    if (Array.isArray(dataPoints)) {\r\n      for (let index = 0; index < dataPoints.length; index++) {\r\n        const element = dataPoints[index];\r\n        //  debugger;\r\n        datareturn.push({\r\n          label: element.label,\r\n          backgroundColor: element.backgroundColor,\r\n          data: element.data\r\n        })\r\n\r\n\r\n      }\r\n    }\r\n\r\n    return datareturn;\r\n    // [\r\n    //   {\r\n    //     data: dataPoints,\r\n    //     backgroundColor: getColor(backgroundColor),\r\n    //     pointHoverBackgroundColor: getColor(pointHoverBackgroundColor),\r\n    //     label: label,\r\n    //     barPercentage: 0.5,\r\n    //     categoryPercentage: 1\r\n    //   }\r\n    // ]\r\n  })()\r\n\r\n  const defaultOptions = (() => {\r\n    return {\r\n      maintainAspectRatio: false,\r\n      legend: {\r\n        display: false\r\n      },\r\n      scales: {\r\n        xAxes: [{\r\n          display: false\r\n        }],\r\n        yAxes: [{\r\n          display: false\r\n        }]\r\n      }\r\n    }\r\n  })()\r\n\r\n  // render\r\n  return (\r\n    <CChartBar\r\n      {...attributes}\r\n      datasets={defaultDatasets}\r\n      options={defaultOptions}\r\n      labels={label}\r\n    />\r\n  )\r\n}\r\n\r\nChartBarSimple.propTypes = {\r\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\r\n  className: PropTypes.string,\r\n  //\r\n  backgroundColor: PropTypes.string,\r\n  pointHoverBackgroundColor: PropTypes.string,\r\n  dataPoints: PropTypes.array,\r\n  label: PropTypes.string,\r\n  pointed: PropTypes.bool\r\n};\r\n\r\nChartBarSimple.defaultProps = {\r\n  backgroundColor: 'rgba(0,0,0,.2)',\r\n  dataPoints: [10, 22, 34, 46, 58, 70, 46, 23, 45, 78, 34, 12],\r\n  label: 'Sales'\r\n};\r\n\r\nexport default ChartBarSimple\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  CWidgetDropdown,\r\n  CRow,\r\n  CCol,\r\n  CDropdown,\r\n  CDropdownMenu,\r\n  CDropdownItem,\r\n  CDropdownToggle\r\n} from '@coreui/react'\r\nimport CIcon from '@coreui/icons-react'\r\nimport ChartLineSimple from '../charts/ChartLineSimple';\r\nimport ChartBarSimple from '../charts/ChartBarSimple';\r\nimport dataservice from \"../service/dataservice\";\r\n\r\nconst WidgetsDropdown = () => {\r\n  // render\r\n  const [GAmonth, setGAmonth] = useState(2);\r\n  const [GAmonthstr, setGAmonthstr] = useState(\"Feb\");\r\n  const [Cmonthstr, setCmonthstr] = useState(\"Feb\");\r\n  const [Cmonth, setCmonth] = useState(2);\r\n\r\n  const [GARawData, setGARawData] = useState([]);\r\n  const [GAData, setGAData] = useState([]);\r\n  const [GALabel, setGALabel] = useState([]);\r\n\r\n  const [CRawData, setCRawData] = useState([]);\r\n  const [CData, setCData] = useState([]);\r\n  const [CLabel, setCLabel] = useState([]);\r\n\r\n\r\n  const [BRawData, setBRawData] = useState([]);\r\n  const [BData, setBData] = useState([]);\r\n  const [BLabel, setBLabel] = useState([]);\r\n\r\n  const [Months, setMonths] = useState([{ name: \"Jan\", id: 1 }, { name: \"Feb\", id: 2 }, { name: \"Mar\", id: 3 }, { name: \"Apr\", id: 4 }, { name: \"May\", id: 5 }, { name: \"Jun\", id: 6 },\r\n  { name: \"Jul\", id: 7 }, { name: \"Aug\", id: 8 }, { name: \"Sep\", id: 9 }, { name: \"Oct\", id: 10 }, { name: \"Nov\", id: 11 }, { name: \"Dec\", id: 12 }]);\r\n\r\n  const getGuestArrived = (isFetchCurrentMonth, Month) => {\r\n    dataservice(\"dashboardstats\", {\r\n      requestfor: 'getGuestArrived',\r\n      data: { isCurrentMonth: isFetchCurrentMonth, month: Month }\r\n    })\r\n      .then(function (data) {\r\n        //debugger;\r\n        if (data.resultkey == 1) {\r\n          var _GARawdata = [];\r\n          var _GAData = [];\r\n          var _GAlabels = [];\r\n          if (data.resultvalue.length > 0) {\r\n            for (let index = 0; index < data.resultvalue.length; index++) {\r\n              const element = data.resultvalue[index];\r\n              _GARawdata.push({ cnt: parseFloat(element.count), mnt: element.mnt, dt: element.dt });\r\n              if (parseFloat(element.mnt) == GAmonth) {\r\n                _GAData.push(parseFloat(element.count));\r\n                _GAlabels.push(element.dt);\r\n              }\r\n            }\r\n          }\r\n          setGARawData(_GARawdata)\r\n          setGAData(_GAData);\r\n          setGALabel(_GAlabels);\r\n\r\n        }\r\n      })\r\n  }\r\n\r\n  const getCollection = () => {\r\n    dataservice(\"dashboardstats\", { requestfor: 'getCollection', data: { month: Cmonth } })\r\n      .then(function (data) {\r\n        if (data.resultkey == 1) {\r\n          var _CRawdata = [];\r\n          var _CData = [];\r\n          var _Clabels = [];\r\n          if (data.resultvalue.length > 0) {\r\n            for (let index = 0; index < data.resultvalue.length; index++) {\r\n              const element = data.resultvalue[index];\r\n              _CRawdata.push({ cnt: parseFloat(element.count), mnt: element.mnt, dt: element.dt });\r\n              if (parseFloat(element.mnt) == GAmonth) {\r\n                _CData.push(parseFloat(element.count));\r\n                _Clabels.push(element.dt);\r\n              }\r\n            }\r\n          }\r\n          debugger;\r\n          setCRawData(_CRawdata)\r\n          setCData(_CData);\r\n          setCLabel(_Clabels);\r\n        }\r\n      })\r\n  }\r\n\r\n\r\n\r\n  const handleClick = (id, opt) => {\r\n    var monthstr = \"\";\r\n    switch (id) {\r\n      case 1:\r\n        monthstr = \"Jan\";\r\n        break;\r\n      case 2:\r\n        monthstr = \"Feb\";\r\n        break;\r\n      case 3:\r\n        monthstr = \"Mar\";\r\n        break;\r\n      case 4:\r\n        monthstr = \"Apr\";\r\n        break;\r\n      case 5:\r\n        monthstr = \"May\";\r\n        break;\r\n      case 6:\r\n        monthstr = \"Jun\";\r\n        break;\r\n      case 7:\r\n        monthstr = \"Jul\";\r\n        break;\r\n      case 8:\r\n        monthstr = \"Aug\";\r\n        break;\r\n      case 9:\r\n        monthstr = \"Sep\";\r\n        break;\r\n      case 10:\r\n        monthstr = \"Oct\";\r\n        break;\r\n      case 11:\r\n        monthstr = \"Nov\";\r\n        break;\r\n      case 12:\r\n        monthstr = \"Dec\";\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n    switch (opt) {\r\n      case \"GA\":\r\n\r\n        debugger;\r\n        var _GAData = [];\r\n        var _GAlabels = [];\r\n        var newGAData = GARawData.filter(x => parseFloat(x.mnt) == id);\r\n        for (let index = 0; index < newGAData.length; index++) {\r\n          const element = newGAData[index];\r\n          _GAData.push(parseFloat(element.cnt));\r\n          _GAlabels.push(element.dt);\r\n        }\r\n        setGAData(_GAData);\r\n        setGALabel(_GAlabels);\r\n\r\n        setGAmonth(id);\r\n        setGAmonthstr(monthstr);\r\n\r\n\r\n        break;\r\n      case \"C\":\r\n        debugger;\r\n        var _CData = [];\r\n        var _Clabels = [];\r\n        var newCData = CRawData.filter(x => parseFloat(x.mnt) == id);\r\n        for (let index = 0; index < newCData.length; index++) {\r\n          const element = newCData[index];\r\n          _CData.push(parseFloat(element.cnt));\r\n          _Clabels.push(element.dt);\r\n        }\r\n        setCData(_CData);\r\n        setCLabel(_Clabels);\r\n\r\n        setCmonth(id);\r\n        setCmonthstr(monthstr);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n  }\r\n  useEffect(() => {\r\n    getGuestArrived(true, 1);\r\n    // getCollection();\r\n  }, [])\r\n  return (\r\n    <CRow>\r\n      <CCol sm=\"6\" lg=\"3\">\r\n        <CWidgetDropdown\r\n          color=\"gradient-primary\"\r\n          header={GAmonthstr}\r\n          text=\"Guest Arrived\"\r\n          footerSlot={\r\n            <ChartLineSimple\r\n              pointed\r\n              className=\"c-chart-wrapper mt-3 mx-3\"\r\n              style={{ height: '70px' }}\r\n              dataPoints={GAData}\r\n              pointHoverBackgroundColor=\"primary\"\r\n              label=\"Count\"\r\n              labels={GALabel}\r\n            />\r\n          }\r\n        >\r\n          <CDropdown>\r\n            <CDropdownToggle color=\"transparent\">\r\n              {/* <CIcon name=\"cil-settings\" /> */}\r\n            </CDropdownToggle>\r\n            <CDropdownMenu className=\"pt-0\" placement=\"bottom-end\">\r\n\r\n              <CDropdownItem onClick={() => handleClick(1, \"GA\")}>Jan</CDropdownItem>\r\n              <CDropdownItem onClick={() => handleClick(2, \"GA\")}>Feb</CDropdownItem>\r\n              <CDropdownItem onClick={() => handleClick(3, \"GA\")}>Mar</CDropdownItem>\r\n              <CDropdownItem onClick={() => handleClick(4, \"GA\")}>Apr</CDropdownItem>\r\n              <CDropdownItem onClick={() => handleClick(5, \"GA\")}>May</CDropdownItem>\r\n              <CDropdownItem onClick={() => handleClick(6, \"GA\")}>Jun</CDropdownItem>\r\n              <CDropdownItem onClick={() => handleClick(7, \"GA\")}>Jul</CDropdownItem>\r\n              <CDropdownItem onClick={() => handleClick(8, \"GA\")}>Aug</CDropdownItem>\r\n              <CDropdownItem onClick={() => handleClick(9, \"GA\")}>Sep</CDropdownItem>\r\n              <CDropdownItem onClick={() => handleClick(10, \"GA\")}>Oct</CDropdownItem>\r\n              <CDropdownItem onClick={() => handleClick(11, \"GA\")}>Nov</CDropdownItem>\r\n              <CDropdownItem onClick={() => handleClick(12, \"GA\")}>Dec</CDropdownItem>\r\n\r\n            </CDropdownMenu>\r\n          </CDropdown>\r\n        </CWidgetDropdown>\r\n      </CCol>\r\n\r\n      <CCol sm=\"6\" lg=\"3\">\r\n        <CWidgetDropdown\r\n          color=\"gradient-info\"\r\n          header={Cmonthstr}\r\n          text=\"Collection\"\r\n          footerSlot={\r\n            <ChartLineSimple\r\n              pointed\r\n              className=\"mt-3 mx-3\"\r\n              style={{ height: '70px' }}\r\n              dataPoints={CData}\r\n              pointHoverBackgroundColor=\"info\"\r\n              options={{ elements: { line: { tension: 0.00001 } } }}\r\n              label=\"Collection\"\r\n              labels={CLabel}\r\n            />\r\n          }\r\n        >\r\n          <CDropdown>\r\n            <CDropdownToggle color=\"transparent\">\r\n              {/* <CIcon name=\"cil-settings\" /> */}\r\n            </CDropdownToggle>\r\n            <CDropdownMenu className=\"pt-0\" placement=\"bottom-end\">\r\n              <CDropdownItem onClick={() => handleClick(1, \"C\")}>Jan</CDropdownItem>\r\n              <CDropdownItem onClick={() => handleClick(2, \"C\")}>Feb</CDropdownItem>\r\n              <CDropdownItem onClick={() => handleClick(3, \"C\")}>Mar</CDropdownItem>\r\n              <CDropdownItem onClick={() => handleClick(4, \"C\")}>Apr</CDropdownItem>\r\n              <CDropdownItem onClick={() => handleClick(5, \"C\")}>May</CDropdownItem>\r\n              <CDropdownItem onClick={() => handleClick(6, \"C\")}>Jun</CDropdownItem>\r\n              <CDropdownItem onClick={() => handleClick(7, \"C\")}>Jul</CDropdownItem>\r\n              <CDropdownItem onClick={() => handleClick(8, \"C\")}>Aug</CDropdownItem>\r\n              <CDropdownItem onClick={() => handleClick(9, \"C\")}>Sep</CDropdownItem>\r\n              <CDropdownItem onClick={() => handleClick(10, \"C\")}>Oct</CDropdownItem>\r\n              <CDropdownItem onClick={() => handleClick(11, \"C\")}>Nov</CDropdownItem>\r\n              <CDropdownItem onClick={() => handleClick(12, \"C\")}>Dec</CDropdownItem>\r\n            </CDropdownMenu>\r\n          </CDropdown>\r\n        </CWidgetDropdown>\r\n      </CCol>\r\n\r\n\r\n\r\n      <CCol sm=\"6\" lg=\"3\">\r\n        <CWidgetDropdown\r\n          color=\"gradient-danger\"\r\n          header=\"\"\r\n          text=\"Bracelet Stats\"\r\n          footerSlot={\r\n            <ChartBarSimple\r\n              className=\"mt-3 mx-3\"\r\n              style={{ height: '70px' }}\r\n              backgroundColor=\"rgb(250, 152, 152)\"\r\n              label=\"Members\"\r\n              dataPoints={[{\r\n                label: 'Buy',\r\n                backgroundColor: 'rgb(250, 152, 152)',\r\n                data: [39, 80, 40, 35, 40, 20, 45]\r\n              }, {\r\n                label: 'Rent',\r\n                backgroundColor: 'rgb(0,216,255,0.9)',\r\n                data: [39, 80, 40, 35, 40, 20, 45]\r\n              }]}\r\n              labels=\"months\"\r\n            />\r\n          }\r\n        >\r\n          <CDropdown>\r\n            <CDropdownToggle color=\"transparent\">\r\n              {/* <CIcon name=\"cil-settings\" /> */}\r\n            </CDropdownToggle>\r\n            <CDropdownMenu className=\"pt-0\" placement=\"bottom-end\">\r\n              <CDropdownItem onClick={() => handleClick(1, \"B\")}>Jan</CDropdownItem>\r\n              <CDropdownItem onClick={() => handleClick(2, \"B\")}>Feb</CDropdownItem>\r\n              <CDropdownItem onClick={() => handleClick(3, \"B\")}>Mar</CDropdownItem>\r\n              <CDropdownItem onClick={() => handleClick(4, \"B\")}>Apr</CDropdownItem>\r\n              <CDropdownItem onClick={() => handleClick(5, \"B\")}>May</CDropdownItem>\r\n              <CDropdownItem onClick={() => handleClick(6, \"B\")}>Jun</CDropdownItem>\r\n              <CDropdownItem onClick={() => handleClick(7, \"B\")}>Jul</CDropdownItem>\r\n              <CDropdownItem onClick={() => handleClick(8, \"B\")}>Aug</CDropdownItem>\r\n              <CDropdownItem onClick={() => handleClick(9, \"B\")}>Sep</CDropdownItem>\r\n              <CDropdownItem onClick={() => handleClick(10, \"B\")}>Oct</CDropdownItem>\r\n              <CDropdownItem onClick={() => handleClick(11, \"B\")}>Nov</CDropdownItem>\r\n              <CDropdownItem onClick={() => handleClick(12, \"B\")}>Dec</CDropdownItem>\r\n\r\n            </CDropdownMenu>\r\n          </CDropdown>\r\n        </CWidgetDropdown>\r\n      </CCol>\r\n      <CCol sm=\"6\" lg=\"3\">\r\n        <CWidgetDropdown\r\n          color=\"gradient-warning\"\r\n          header=\"\"\r\n          text=\"Sr.Citizen Stats\"\r\n          footerSlot={\r\n            <ChartLineSimple\r\n              className=\"mt-3\"\r\n              style={{ height: '70px' }}\r\n              backgroundColor=\"rgba(255,255,255,.2)\"\r\n              dataPoints={[78, 81, 80, 45, 34, 12, 40]}\r\n              options={{ elements: { line: { borderWidth: 2.5 } } }}\r\n              pointHoverBackgroundColor=\"warning\"\r\n              label=\"Members\"\r\n              labels=\"months\"\r\n            />\r\n          }\r\n        >\r\n          <CDropdown>\r\n            <CDropdownToggle color=\"transparent\">\r\n              {/* <CIcon name=\"cil-settings\" /> */}\r\n            </CDropdownToggle>\r\n            <CDropdownMenu className=\"pt-0\" placement=\"bottom-end\">\r\n              <CDropdownItem>Jan</CDropdownItem>\r\n              <CDropdownItem>Feb</CDropdownItem>\r\n              <CDropdownItem>Mar</CDropdownItem>\r\n              <CDropdownItem>Apr</CDropdownItem>\r\n              <CDropdownItem>May</CDropdownItem>\r\n              <CDropdownItem>Jun</CDropdownItem>\r\n              <CDropdownItem>Jul</CDropdownItem>\r\n              <CDropdownItem>Aug</CDropdownItem>\r\n              <CDropdownItem>Sep</CDropdownItem>\r\n              <CDropdownItem>Oct</CDropdownItem>\r\n              <CDropdownItem>Nov</CDropdownItem>\r\n              <CDropdownItem>Dec</CDropdownItem>\r\n\r\n            </CDropdownMenu>\r\n          </CDropdown>\r\n        </CWidgetDropdown>\r\n      </CCol>\r\n    </CRow>\r\n  )\r\n}\r\n\r\nexport default WidgetsDropdown\r\n"],"sourceRoot":""}